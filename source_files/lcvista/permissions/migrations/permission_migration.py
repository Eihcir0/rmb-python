# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2019-09-30 21:31
from __future__ import unicode_literals

from django.db import migrations

from lcvista.permissions.models import (
    REACT_PERMISSIONS,
)


def add_permission_roles(apps, schema_editor):
    PermissionGroup = apps.get_model('permissions', 'PermissionGroup')
    AuthGroup = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    RobotMonkeyButler = apps.get_model('robotmonkeybutlers', 'RobotMonkeyButler')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    # 1. Add permissions
    #  A. Endpont permissions:
    content_type = ContentType.objects.get_for_model(RobotMonkeyButler)
    #   - add
    robotmonkeybutler_add_permission, created = Permission.objects.get_or_create(
        codename='add_robotmonkeybutler', content_type=content_type
    )
    #   - change
    robotmonkeybutler_change_permission, created = Permission.objects.get_or_create(
        codename='change_robotmonkeybutler', content_type=content_type
    )
    #   - delete
    robotmonkeybutler_delete_permission, created = Permission.objects.get_or_create(
        codename='delete_robotmonkeybutler', content_type=content_type
    )

    # #  B. Add "type" permission if needed
    # robotmonkeybutler_some_type_permission, created = Permission.objects.get_or_create(
    #     codename='robotmonkeybutler_some_type', content_type=content_type
    # )

    # """  If there were a second type it would go here.  We are not implementing a second 'type'
    # in the migration, but this is here for example: """
    # robotmonkeybutler_other_type_permission, created = Permission.objects.get_or_create(
    #     codename='robotmonkeybutler_other_type_permission', content_type=content_type
    # )

    #  C. Add React permission
    ct, created = ContentType.objects.get_or_create(model='', app_label='react')
    robotmonkeybutlers_react_permission, created = Permission.objects.get_or_create(
        codename='robotmonkeybutlers', name=REACT_PERMISSIONS['robotmonkeybutlers'], content_type=ct
    )

    # 2. Add / Update Auth Groups / Permission Groups
    #  A. Admin Group
    admin_group = AuthGroup.objects.get(
        name="Default Administrator",
    )
    admin_group.permissions.add(
        # endpoint permissions
        robotmonkeybutler_change_permission,
        robotmonkeybutler_add_permission,
        robotmonkeybutler_delete_permission,

        # # type permission
        # robotmonkeybutler_some_type_permission,

        # react navigation permission
        robotmonkeybutlers_react_permission,
    )

    #  NOTE:  We do not need to create the PermissionGroup for the Default Admin as it already
    #  exists.  All we have to do is add the permissions to the AuthGroup as shown above

    #  B. 'Type' group  (if applicable)
    #  NOTE: Since we do not have the concept of 'type' with this, then we just
    #  add a base role here
    robotmonkeybutler_manage, created = AuthGroup.objects.get_or_create(
        name="Robot Monkey Butlers",
    )
    robotmonkeybutler_manage.permissions.set([
        # endpoint permissions
        robotmonkeybutler_change_permission,
        robotmonkeybutler_add_permission,
        robotmonkeybutler_delete_permission,

        #  type permission
        # robotmonkeybutler_some_type_permission,

        # react navigation permission
        robotmonkeybutlers_react_permission,
    ])

    #  After creating the new AuthGroup and adding the permissions above, we also need to
    #  create a PermissionGroup which is basically just a wrapper around the AuthGroup which
    #  contains a description
    PermissionGroup.objects.get_or_create(
        description="Robot Monkey Butlers",
        group=robotmonkeybutler_manage,
    )

    #   C. 'Manager' group -- If we were adding both Users and Program type
    # permissions, then we would also add a 'manager' group as follows.  Since
    # we are only implementing one type in this migration, we will save the 'manager'
    # group for a future migration

    # bulk_upload_manager = AuthGroup.objects.create(
    #     name="Bulk Uploads Manager",
    # )
    # reports_approval_request_manage.permissions.set([
    #     #endpoint permissions
    #     robotmonkeybutler_change_permission,
    #     robotmonkeybutler_add_permission,
    #     robotmonkeybutler_delete_permission,

    #     #ALL bulk upload type permission
    #     robotmonkeybutler_users_type_permission,
    #     robotmonkeybutler_programs_type_permission, #  *** Contains both 'type's

    #     #react navigation permission
    #     robotmonkeybutlers_credit_permission,
    # ])

    # PermissionGroup.objects.create(
    # description="Bulk Uploads Manager",
    # group=robotmonkeybutler_manage,
    # )


def teardown_permission_roles(apps, schema_editor):
    PermissionGroup = apps.get_model('permissions', 'PermissionGroup')
    AuthGroup = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    RobotMonkeyButler = apps.get_model('', 'RobotMonkeyButler')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    ct, created = ContentType.objects.get_or_create(model='', app_label='react')

    robotmonkeybutler_manage = AuthGroup.objects.get(
        name="Bulk Uploads > Users",
    )

    Permission.objects.filter(
        codename='robotmonkeybutlers', name=REACT_PERMISSIONS['robotmonkeybutlers'], content_type=ct
    ).delete()

    content_type = ContentType.objects.get_for_model(RobotMonkeyButler)
    Permission.objects.filter(
        codename__in=[
            'add_robotmonkeybutler',
            'change_robotmonkeybutler',
            'delete_robotmonkeybutler'
        ], content_type=content_type
    ).delete()

    PermissionGroup.objects.filter(
        group=robotmonkeybutler_manage,
    ).delete()
    robotmonkeybutler_manage.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('permissions', 'previous_migration_filename'),
        ('robotmonkeybutlers', '0004_auto_20190925_1658'),
    ]

    operations = [
        migrations.RunPython(add_permission_roles, reverse_code=teardown_permission_roles),
    ]